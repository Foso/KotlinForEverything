{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Kotlin For Everything \u00b6 Random collection of my notes about Kotlin","title":"Overview"},{"location":"#kotlin-for-everything","text":"Random collection of my notes about Kotlin","title":"Kotlin For Everything"},{"location":"ios/debugging/","text":"Debugging \u00b6 With \u00b6 In Xcode https://github.com/touchlab/xcode-kotlin In Android Studio https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform-mobile","title":"Debugging"},{"location":"ios/debugging/#debugging","text":"","title":"Debugging"},{"location":"ios/debugging/#with","text":"In Xcode https://github.com/touchlab/xcode-kotlin In Android Studio https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform-mobile","title":"With"},{"location":"ios/overview/","text":"Kotlin For iOS \u00b6 https://kotlinlang.org/docs/tutorials/native/apple-framework.html How to set the framework name? \u00b6 iosX64 ( ' ios ' ) { binaries { framework { baseName = ' shared ' } } }","title":"Overview"},{"location":"ios/overview/#kotlin-for-ios","text":"https://kotlinlang.org/docs/tutorials/native/apple-framework.html","title":"Kotlin For iOS"},{"location":"ios/overview/#how-to-set-the-framework-name","text":"iosX64 ( ' ios ' ) { binaries { framework { baseName = ' shared ' } } }","title":"How to set the framework name?"},{"location":"javascript/dynamic/","text":"Dynamic \u00b6 Dynamic is a data type that can be used when","title":"Dynamic"},{"location":"javascript/dynamic/#dynamic","text":"Dynamic is a data type that can be used when","title":"Dynamic"},{"location":"javascript/overview/","text":"KotlinJs \u00b6 Where can i find the generated .js file? \u00b6 When your module is called example . You can find it under build/js/packages/example/kotlin/example.js","title":"Overview"},{"location":"javascript/overview/#kotlinjs","text":"","title":"KotlinJs"},{"location":"javascript/overview/#where-can-i-find-the-generated-js-file","text":"When your module is called example . You can find it under build/js/packages/example/kotlin/example.js","title":"Where can i find the generated .js file?"},{"location":"javascript/interop/calljavascriptfromkotlin/","text":"Call JavaScript from Kotlin \u00b6 var \u00b6 var jsTestString = \"Hello World in Js\" ; external var jsTestString : dynamic external var jsTestString : String function \u00b6 var myJsAlertFunction = function (){ alert ( \"Hello World\" ); } external fun myJsAlertFunction () var myJsAlertFunction = function ( text ){ alert ( text ); } external fun myJsAlertFunction ( text : String ) external fun myJsAlertFunction ( text : dynamic )","title":"Call JavaScript from Kotlin"},{"location":"javascript/interop/calljavascriptfromkotlin/#call-javascript-from-kotlin","text":"","title":"Call JavaScript from Kotlin"},{"location":"javascript/interop/calljavascriptfromkotlin/#var","text":"var jsTestString = \"Hello World in Js\" ; external var jsTestString : dynamic external var jsTestString : String","title":"var"},{"location":"javascript/interop/calljavascriptfromkotlin/#function","text":"var myJsAlertFunction = function (){ alert ( \"Hello World\" ); } external fun myJsAlertFunction () var myJsAlertFunction = function ( text ){ alert ( text ); } external fun myJsAlertFunction ( text : String ) external fun myJsAlertFunction ( text : dynamic )","title":"function"},{"location":"javascript/interop/callkotlinfromjavascript/","text":"Call Kotlin Code from JavaScript \u00b6 Let\u2019s say you have a gradle module called testjsinterop and a file KotlinCode.kt with the code below : //KotlinCode.kt import kotlinx.browser.window var testString = \"Hello World in Kt\" fun ktHelloWorldAlert (){ window . alert ( \"This is ktHelloWorldAlert \" + testString ) } @JsExport fun ktHelloWorldAlertWithParameter ( text : String ){ window . alert ( \"This is ktHelloWorldAlertWithParameter \" + text ) } class MyTestClass (){ fun sayHelloWorld (){ window . alert ( \"HelloWorld\" ) } } Now you want to use the call the code inside your test.js. top level \u00b6 var/val \u00b6 When you want to use a top level var or val from your Kotlin file inside JavaScript, you need to prefix it with the module name. In this example the module name is testjsinterop //Inside your javascript file testjsinterop . testString function \u00b6 When you want to use a top level function from your Kotlin file, you need to prefix it with the module name. In this example the module name is testjsinterop Without Parameters //Inside your javascript file testjsinterop . ktHelloWorldAlert (); With Parameters When your top level function needs parameters, you need to annotate your Kotlin function with @JsExport //Inside your javascript file testjsinterop . ktHelloWorldAlertWithParameter ( \"Hello\" ); class \u00b6 //Inside your javascript file new testjsinterop . MyTestClass (). sayHelloWorld ();","title":"Call Kotlin from JavaScript"},{"location":"javascript/interop/callkotlinfromjavascript/#call-kotlin-code-from-javascript","text":"Let\u2019s say you have a gradle module called testjsinterop and a file KotlinCode.kt with the code below : //KotlinCode.kt import kotlinx.browser.window var testString = \"Hello World in Kt\" fun ktHelloWorldAlert (){ window . alert ( \"This is ktHelloWorldAlert \" + testString ) } @JsExport fun ktHelloWorldAlertWithParameter ( text : String ){ window . alert ( \"This is ktHelloWorldAlertWithParameter \" + text ) } class MyTestClass (){ fun sayHelloWorld (){ window . alert ( \"HelloWorld\" ) } } Now you want to use the call the code inside your test.js.","title":"Call Kotlin Code from JavaScript"},{"location":"javascript/interop/callkotlinfromjavascript/#top-level","text":"","title":"top level"},{"location":"javascript/interop/callkotlinfromjavascript/#varval","text":"When you want to use a top level var or val from your Kotlin file inside JavaScript, you need to prefix it with the module name. In this example the module name is testjsinterop //Inside your javascript file testjsinterop . testString","title":"var/val"},{"location":"javascript/interop/callkotlinfromjavascript/#function","text":"When you want to use a top level function from your Kotlin file, you need to prefix it with the module name. In this example the module name is testjsinterop Without Parameters //Inside your javascript file testjsinterop . ktHelloWorldAlert (); With Parameters When your top level function needs parameters, you need to annotate your Kotlin function with @JsExport //Inside your javascript file testjsinterop . ktHelloWorldAlertWithParameter ( \"Hello\" );","title":"function"},{"location":"javascript/interop/callkotlinfromjavascript/#class","text":"//Inside your javascript file new testjsinterop . MyTestClass (). sayHelloWorld ();","title":"class"},{"location":"javascript/interop/jscode/","text":"","title":"Jscode"}]}